using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using CoreLibraries.IO;
using VaultLib.Core.DB;
using VaultLib.Core.Hashing;

namespace VaultLib.Core.Chunks
{
    public class BINStringsChunk : ChunkBase
    {
        public List<string> Strings { get; set; }

        public override void Read(Vault vault, BinaryReader br)
        {
            while (br.BaseStream.Position < this.EndOffset)
            {
                var str = NullTerminatedString.Read(br);
                HashManager.AddVLT(str);
            }
        }

        public override void Write(Vault vault, BinaryWriter bw)
        {
            Assembly currentAssembly = Assembly.GetAssembly(typeof(Database));
            AssemblyMetadataAttribute metadataAttribute =
                currentAssembly.GetCustomAttributes<AssemblyMetadataAttribute>().First(m => m.Key == "GitHash");

            Strings.Insert(0,
                $"Generated by VaultBoy (lib state {metadataAttribute.Value}) by heyitsleo - {DateTime.Now.ToString(CultureInfo.InvariantCulture)}");

            //Strings.Insert(0, "Generated by VaultBoy, the program that always manages to screw something up!");

            foreach (var s in Strings)
            {
                vault.SaveContext.StringOffsets[s] = bw.BaseStream.Position;
                NullTerminatedString.Write(bw, s);
            }

            bw.AlignWriter(0x10);
        }

        public override uint ID => 0x53747245;
        public override uint Size { get; set; }
        public override long Offset { get; set; }
    }
}
